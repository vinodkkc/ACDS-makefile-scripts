SHELL = /bin/sh
BUILD=v1
BUILD_DIR=build
DOCKER_DIR=scc-docker
# TMP_DOCKER_DIR=scc-tmp-docker
OUT_DIR=release
SCC_TAR=SCC_v1.tar.gz
ACDS_REGISTRY=docker.acds.net.in/scc
ifneq ($(BUILD_NUMBER),)
ACDS_SCC_VERSION=$(BUILD_NUMBER)
else
ACDS_SCC_VERSION=latest
endif
REACT_APP_HOST=scc-dev.acds.net.in
REACT_APP_BASE_PATH=/scc
REACT_APP_SERVER_BASE_PATH=https://scc-dev.acds.net.in:8443/scc
REACT_APP_ATTACK_NAV_SERVER_API=https://scc-dev.acds.net.in:8012
REACT_APP_NETWORK_DASHBOARD_URL="https://securityonionscc.acds.net.in/kibana/app/dashboards\#/view/04ff3ef0-6ea4-11ea-9266-1fd14ca6af34?embed=true&_g=(filters%3A!()%2CrefreshInterval%3A(pause%3A!t%2Cvalue%3A0)%2Ctime%3A(from%3Anow-24h%2Cto%3Anow))&show-time-filter=true"
REACT_APP_ENDPOINT_DASHBOARD_URL="https://securityonionscc.acds.net.in/kibana/app/dashboards\#/view/92e63cc0-6ec0-11ea-9266-1fd14ca6af34?embed=true&_g=(filters%3A!()%2CrefreshInterval%3A(pause%3A!t%2Cvalue%3A0)%2Ctime%3A(from%3Anow-24h%2Cto%3Anow))&show-time-filter=true"
REACT_APP_MISP_URL=https://scc-tip.acds.net.in/events/index
REACT_APP_SO_ALERTS_URL="https://securityonionscc.acds.net.in/\#/alerts?embed=true&"
REACT_APP_RISK_REPORT_URL="https://scc-rm.acds.net.in:5601/app/dashboards\#/view/2f4a3750-859f-11ec-9d61-271b2a94009b?embed=true&_g=(filters%3A!())"
REACT_APP_CONFIG_COMPLIANCE_REPORT_URL="https://scc-rm.acds.net.in:5601/app/dashboards\#/view/e02acee0-8581-11ec-9d61-271b2a94009b?embed=true&_g=(filters%3A!())&show-time-filter=true"
REACT_APP_VULNERABILITY_REPORT_URL="https://scc-rm.acds.net.in:5601/app/dashboards\#/view/7c7a7260-859a-11ec-9d61-271b2a94009b?embed=true&_g=(filters%3A!())&show-time-filter=true"
REACT_APP_POLICY_MANAGER_API_SERVER=https://scc-pm.acds.net.in:883/PolicyManager
REACT_APP_LOGIN_TIMEOUT=30
ifeq ($(env), --prod)
	ENV_FILE:='.env.prod'
else
	ENV_FILE:='.env'
endif
all: clean build
clean:
	sudo rm -rf $(BUILD_DIR);
	# [ -e $(TMP_DOCKER_DIR)/docker-compose.yml ] && ( cd $(TMP_DOCKER_DIR); docker-compose down -v --rmi all --remove-orphans; echo SUCCESS ) || echo "No docker-compose.yml to clean"
	# # Remove temp docker folder
	# sudo rm -rf $(TMP_DOCKER_DIR)
	echo $(env)
	if [ "$(env)" = "--prod" ]; then \
		sudo docker-compose -f docker-compose.yml -f docker-compose-scc.prod.yml --env-file $(DOCKER_DIR)/.env.prod down -v --rmi all --remove-orphans; \
	else \
		sudo docker-compose down -v --rmi local --remove-orphans; \
	fi
build:
	echo "Starting SCC build #${BUILD}"
	mkdir -p $(BUILD_DIR); 
	mkdir -p $(OUT_DIR);
	# cp -a $(DOCKER_DIR) $(TMP_DOCKER_DIR); 
	# cd $(TMP_DOCKER_DIR);  docker-compose up -d
	echo $(ENV_FILE)
	sed -i '/REACT_APP_HOST/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_HOST=$(REACT_APP_HOST) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_BASE_PATH/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_BASE_PATH=$(REACT_APP_BASE_PATH) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_SERVER_BASE_PATH/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_SERVER_BASE_PATH=$(REACT_APP_SERVER_BASE_PATH) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_ATTACK_NAV_SERVER_API/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_ATTACK_NAV_SERVER_API=$(REACT_APP_ATTACK_NAV_SERVER_API) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_NETWORK_DASHBOARD_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_NETWORK_DASHBOARD_URL=$(REACT_APP_NETWORK_DASHBOARD_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_ENDPOINT_DASHBOARD_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_ENDPOINT_DASHBOARD_URL=$(REACT_APP_ENDPOINT_DASHBOARD_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_MISP_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_MISP_URL=$(REACT_APP_MISP_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_SO_ALERTS_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_SO_ALERTS_URL=$(REACT_APP_SO_ALERTS_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_RISK_REPORT_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_RISK_REPORT_URL=$(REACT_APP_RISK_REPORT_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_CONFIG_COMPLIANCE_REPORT_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_CONFIG_COMPLIANCE_REPORT_URL=$(REACT_APP_CONFIG_COMPLIANCE_REPORT_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_VULNERABILITY_REPORT_URL/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_VULNERABILITY_REPORT_URL=$(REACT_APP_VULNERABILITY_REPORT_URL) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_POLICY_MANAGER_API_SERVER/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_POLICY_MANAGER_API_SERVER=$(REACT_APP_POLICY_MANAGER_API_SERVER) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/REACT_APP_LOGIN_TIMEOUT/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo REACT_APP_LOGIN_TIMEOUT=$(REACT_APP_LOGIN_TIMEOUT) >> $(DOCKER_DIR)/$(ENV_FILE)
	sed -i '/ACDS_SCC_VERSION/c\' $(DOCKER_DIR)/$(ENV_FILE)
	echo ACDS_SCC_VERSION=$(ACDS_SCC_VERSION) >> $(DOCKER_DIR)/$(ENV_FILE)
	if [ "$(env)" = "--prod" ]; then \
		sudo docker-compose -f docker-compose.yml -f docker-compose-scc.prod.yml --env-file $(DOCKER_DIR)/.env.prod up -d --build; \
	else \
		# dev environment; \
		sudo docker-compose up -d --build; \
	fi
	# sleep 1m
	if [ "$(env)" = "--prod" ]; then \
		(sudo docker image save $$(sudo docker image ls | grep scc_db | awk '{print $$3}') -o $(BUILD_DIR)/scc_db.tar scc_db:v1); \
		(sudo docker image save $$(sudo docker image ls | grep scc_adminer | awk '{print $$3}') -o $(BUILD_DIR)/scc_adminer.tar scc_adminer:v1); \
		(sudo docker image save $$(sudo docker image ls | grep scc_app1 | awk '{print $$3}') -o $(BUILD_DIR)/scc_app1.tar scc_app1:v1); \
		(sudo docker image save $$(sudo docker image ls | grep scc_app2 | awk '{print $$3}') -o $(BUILD_DIR)/scc_app2.tar scc_app2:v1); \
		(sudo docker image save $$(sudo docker image ls | grep scc_web | awk '{print $$3}') -o $(BUILD_DIR)/scc_web.tar scc_web:v1); \
		# Bundle docker compose for deployment.; \
		cd $(BUILD_DIR); \sudo tar -czvf $(SCC_TAR) *.tar; \cd ..;\
		sudo rm -rf $(OUT_DIR)/*; \
		mv $(BUILD_DIR)/*.tar.gz $(OUT_DIR)/; \
		cp -r $(DOCKER_DIR)/deploy_scc_docker_registry.sh $(DOCKER_DIR)/deploy_scc.sh $(DOCKER_DIR)/$(ENV_FILE) $(DOCKER_DIR)/docker-compose.yml $(DOCKER_DIR)/ssl $(OUT_DIR)/; \
		mkdir -p $(OUT_DIR)/scc-db; \cp -r scc-db/scc.sql $(OUT_DIR)/scc-db/scc.sql; \
		echo "SCC deployment bundle generated successfully."; \
		cd $(BUILD_DIR); \sudo rm *.tar; \
		# sudo rm -rf $(SCC_TMP_DIR); \
	fi
docker-push-image:
	if [ "$(env)" = "--prod" ]; then \
		docker tag scc_db:v1 $(ACDS_REGISTRY)/scc_db:$(ACDS_SCC_VERSION); \
		docker push $(ACDS_REGISTRY)/scc_db:$(ACDS_SCC_VERSION); \
		docker tag scc_adminer:v1 $(ACDS_REGISTRY)/scc_adminer:$(ACDS_SCC_VERSION); \
		docker push $(ACDS_REGISTRY)/scc_adminer:$(ACDS_SCC_VERSION); \
		docker tag scc_app1:v1 $(ACDS_REGISTRY)/scc_app1:$(ACDS_SCC_VERSION); \
		docker push $(ACDS_REGISTRY)/scc_app1:$(ACDS_SCC_VERSION); \
		docker tag scc_app2:v1 $(ACDS_REGISTRY)/scc_app2:$(ACDS_SCC_VERSION); \
		docker push $(ACDS_REGISTRY)/scc_app2:$(ACDS_SCC_VERSION); \
		docker tag scc_web:v1 $(ACDS_REGISTRY)/scc_web:$(ACDS_SCC_VERSION); \
		docker push $(ACDS_REGISTRY)/scc_web:$(ACDS_SCC_VERSION); \
	fi
cleanall:
	# stop all containers
	( sudo docker container stop $$(sudo docker container ls | grep scc | awk '{print $$1}') ) && ( echo "Stopped Containers" ) 
	# remove all containers
	( sudo docker container rm $$(sudo docker container ls -a | grep scc | awk '{print $$1}') ) && ( echo "Removed Containers" ) 
	# remove all images
	( sudo docker rmi -f $$(sudo docker images | grep scc | awk '{print $$3}') ) && ( echo "Removed Images" ) 
	# remove all volumes
	( sudo docker volume rm $$(sudo docker volume ls | grep scc | awk '{print $$2}') ) && ( echo "Remove Volumes" ) 
.PHONY: clean cleanall build all





pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'make -C ./SCC build env="--prod"'
                sh 'make -C ./SCC docker-push-image env="--prod"'
            }
            post { 
                always {
                    echo 'Archiving artifacts'
                    archiveArtifacts artifacts: 'SCC/release/', onlyIfSuccessful: true 
                    echo 'Clean Up action'
                    sh 'chmod +x ./SCC/cleanup.sh'
                    sh './SCC/cleanup.sh'
                }
            }
        }
    }
    post { 
            always {
                    cleanWs()
                    emailext ( 
                    body: "More info at: ${env.BUILD_URL}", 
                    subject: "${env.JOB_NAME}: ${env.BUILD_NUMBER} : ${currentBuild.currentResult}", 
                    to: 'apoorva_ganu@acds.net.in,manoj_modak@acds.net.in' 
                    ) 
                }
        }
}



#!/bin/bash
echo "Running Cleanup Script"
# stop all containers
container=$(docker container ls -aq)
if [ -z "$container" ]; then
    echo "No Containers Found"
else
    echo "Stopping Containers"
    docker container stop $(docker container ls -aq)
    echo "Removing Containers"
    docker container rm $(docker container ls -aq)
fi
# Remove Images
images=$(docker images -a -q)
if [ -z "$images" ]; then
    echo "No Images Found"
else
    echo "Removing Images"
    docker rmi -f $(docker images -a -q)
fi
volumes=$(docker volume ls -q)
if [ -z "$volumes" ]; then
    echo "No Volumes Found"
else
    echo "Removing Volumes"
    docker volume rm $(docker volume ls -q)
fi

-------------

build


!/bin/sh
ROOTDIR=$PWD
SCC_TMP_DIR=$PWD/tmp_scc
script_name=$0
env=$1
server_ip=$2
usage() {
    echo ""
    echo "Usage: sh $script_name [build_option [server_ip]]"
    echo "--local:    Build docker for local deployment. SCC UI and other components will be served on localhost."
    echo "--prod:     Build docker for prod deployment. SCC UI and other components will be served on [server_ip]."
    echo ""
}
if [ "$env" != "--prod" ] && [ "$env" != "--local" ]; then
    usage
    exit 1
fi
if [ -d "$SCC_TMP_DIR" ]; then
    sudo rm -rf $SCC_TMP_DIR 
fi
checkDirStructire() {
    if [ -d "../scc-db" ] && [ -d "../scc-adminer" ] && [ -d "../scc-ui" ] && [ -d "../scc-java" ] && [ -d "../scc-flask" ]
    then
        echo "Directory structure check complete."
    else
        echo "Please copy entire SCC folder and maintain directory structure. (some folder is missing.)"
        exit
    fi
}
removePrevBuild() {
    echo $env
    cd $ROOTDIR/..
    if [ "$env" = "--prod" ]; then 
        sudo docker-compose -f docker-compose.yml -f docker-compose-scc.prod.yml --env-file $ROOTDIR/../scc-ui/.env.prod down -v --rmi local --remove-orphans
    else
        sudo docker-compose down -v --rmi local --remove-orphans
    fi
    cd $ROOTDIR
    # sleep 1m
}
getLatestCode() {
    mkdir $SCC_TMP_DIR
    cd $SCC_TMP_DIR
    git clone ssh://code.acds.net.in:29418/SCC
    git_clone_status=$?
    if [ $git_clone_status -eq 0 ]; then
        echo "Fetched latest code."
        cd $ROOTDIR
        cp -r $SCC_TMP_DIR/SCC/SCC/scc-ui/* ../scc-ui/
        cp -r $SCC_TMP_DIR/SCC/SCC/scc-flask/* ../scc-flask/
        # cp -r $SCC_TMP_DIR/SCC/SCC/scc-java/* ../scc-java/
    else
        read -p "Couldn't fetch latest code. Do you want to continue with existing code? [y/n]" selected_option
        case $selected_option in  
            y|Y)
                echo "Continuing with existing code..."
                ;; 
            n|N)
                echo "Exiting..."
                exit $git_clone_status
                ;; 
            *)
                echo "Invalid option.."
                exit $git_clone_status
                ;; 
        esac
    fi
}
replaceEnv() {
    cd $ROOTDIR
    if [ "$env" = "--prod" ] && [ "$server_ip" != "" ]; then
        echo `pwd`
        sed -i "s/localhost/$server_ip/g" $ROOTDIR/../scc-ui/.env.prod
    fi
}
buildAndRunContainers() {
    echo "Building docker images and running containers... \n"
    cd $ROOTDIR/..
    if [ "$env" = "--prod" ]; then 
        sudo docker-compose -f docker-compose.yml -f docker-compose-scc.prod.yml --env-file $ROOTDIR/../scc-ui/.env.prod up -d --build
    else
        sudo docker-compose up -d --build
    fi
    docker_compose_status=$?
    if [ $docker_compose_status -eq 0 ]; then
        echo "*************************************\n"
        sleep 1m
        echo "Containers are running. \n"
    else
        exit $docker_compose_status 
    fi
}
saveImages() {
    if [ "$env" = "--prod" ]; then 
        cd $ROOTDIR
        echo "Creating compressed file from latest image...\n"
        sudo docker image save $(sudo docker image ls | grep scc_web | awk '{print $3}') -o scc_web.tar
        sudo docker image save $(sudo docker image ls | grep scc_app1 | awk '{print $3}') -o scc_app1.tar 
        sudo docker image save $(sudo docker image ls | grep scc_app2 | awk '{print $3}') -o scc_app2.tar 
        sudo docker image save $(sudo docker image ls | grep scc_db | awk '{print $3}') -o scc_db.tar  
        sudo docker image save $(sudo docker image ls | grep scc_adminer | awk '{print $3}') -o scc_adminer.tar  
        file_name=$ROOTDIR/SCC_$(date "+%d_%B_%Y_%H%M%S").tar.gz
        # Bundle docker compose for deployment.
        sudo tar -czvf $file_name scc_web.tar scc_app1.tar scc_app2.tar scc_db.tar scc_adminer.tar scc-docker-compose-deploy.yml 
        sudo rm scc_web.tar scc_app1.tar scc_app2.tar scc_db.tar scc_adminer.tar
        echo "SCC deployment bundle " $file_name "generated successfully."
        sudo rm -rf $SCC_TMP_DIR
    fi 
}
############################################################################
checkDirStructire
removePrevBuild
# getLatestCode
replaceEnv
buildAndRunContainers
saveImages
echo "***************Completed**************\n"

---------------------------------------------------------
deploy

#!/bin/sh
if [ $# -lt 2 ]; then 
    echo "Usage : ./deploy_scc.sh <SCC Bundle> <target_dir>" $#
    exit 
fi
SCCDIR=$2
if [ -d "$SCCDIR" ]; then
    echo "removing existing installation directory"
    sudo rm -rf $SCCDIR 
fi
# stop all containers
sudo docker container stop $(sudo docker container ls | grep scc | awk '{print $1}')
# remove all containers
sudo docker container rm $(sudo docker container ls -a | grep scc | awk '{print $1}')
# remove all images
sudo docker rmi -f $(sudo docker images | grep scc | awk '{print $3}')
# remove all volumes
sudo docker volume rm $(sudo docker volume ls | grep scc | awk '{print $2}')
mkdir $SCCDIR
echo "Installing SCC in " $2 "..."
sudo tar -xvzf $1 -C $SCCDIR
cd $SCCDIR
sudo docker image load -i scc_web.tar
sudo docker image load -i scc_app1.tar
sudo docker image load -i scc_app2.tar
sudo docker image load -i scc_db.tar
sudo docker image load -i scc_adminer.tar  
# sed -i "s/REACT_APP_HOST/$3/g" .env.prod
sudo docker-compose up -d
echo "SCC instance now running"
